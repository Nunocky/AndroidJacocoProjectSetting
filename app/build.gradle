plugins {
    id 'jacoco'
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

jacoco {
    toolVersion = "0.8.9"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses true
    jacoco.excludes = ['jdk.internal.*']
}

android {
    namespace 'com.example.myapplication'
    compileSdk 33

    defaultConfig {
        applicationId "com.example.myapplication"
        minSdk 27
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.3.2'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

task jacocoUnitTestReport(
        type: JacocoReport,
        dependsOn: ['testDebugUnitTest'],
        group: "verification"
) {
    reports {
        csv {
            enabled false
        }
        xml {
            enabled true
        }
        html {
            enabled true
        }
    }

    // Add files that should not be listed in the report (e.g. generated Files from dagger)
    def fileFilter = ['**/*Dagger.*']

    def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)

    def mainSrc = "$projectDir/src/main/java"
    sourceDirectories.from = files([mainSrc])
    classDirectories.from = files([kotlinDebugTree])

    // Make sure the path is correct (if not run the unit tests and try find the .exec file that is generated after the unit tests are finished should be similar to that one)
    executionData.from = fileTree(dir: "$buildDir", includes: ["outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec"])
}

//task jacocoTestReport(
//        type: JacocoReport,
//        dependsOn: "testDebugUnitTest",
//        group: "verification"
//) {
//    reports {
//        xml.enabled true
//        html.enabled true
//    }
//    getSourceDirectories().from = "${projectDir}/src/main/java"
//    getClassDirectories().from = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug")
//    getExecutionData().from = "${buildDir}/jacoco/testDebugUnitTest.exec"
//}

dependencies {

    implementation 'androidx.core:core-ktx:1.8.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.3.1'
    implementation 'androidx.activity:activity-compose:1.5.1'
    implementation platform('androidx.compose:compose-bom:2022.10.00')
    implementation 'androidx.compose.ui:ui'
    implementation 'androidx.compose.ui:ui-graphics'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    implementation 'androidx.compose.material3:material3'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation platform('androidx.compose:compose-bom:2022.10.00')
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'
    debugImplementation 'androidx.compose.ui:ui-tooling'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'
}